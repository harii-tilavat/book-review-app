generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @unique @default(uuid())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  Book      Book[]
  Draft     Draft[]
  Review    Review[]
}

model Book {
  id          String   @id @unique @default(uuid())
  userId      String
  title       String
  author      String
  genreId     String
  isbn        String?
  cover       String?
  description String?  @db.VarChar(1000)
  avgRating   Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  draftId     String?
  draft       Draft?   @relation(fields: [draftId], references: [id], onDelete: Cascade)
  genre       Genre    @relation(fields: [genreId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  reviews     Review[]

  @@index([draftId], map: "Book_draftId_fkey")
  @@index([genreId], map: "Book_genreId_fkey")
  @@index([userId], map: "Book_userId_fkey")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  text      String
  rating    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([bookId], map: "Review_bookId_fkey")
  @@index([userId], map: "Review_userId_fkey")
}

model Genre {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Book      Book[]
}

model Draft {
  id          String   @id @default(uuid())
  userId      String
  title       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)
  books       Book[]
  user        User     @relation(fields: [userId], references: [id])
  pages       Page[]

  @@index([userId], map: "Draft_userId_fkey")
}

model Page {
  id      String   @id @default(uuid())
  draftId String
  type    PageType
  order   Int
  content String?  @db.Text
  draft   Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@index([draftId])
}

enum PageType {
  INDEX
  TITLE
  CONTENT
}
