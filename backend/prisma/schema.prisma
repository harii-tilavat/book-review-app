// =============================================================================
// PRISMA SCHEMA CONFIGURATION
// =============================================================================
// Depending on the database you're using, set the DATABASE_URL in your .env file:
// - For MySQL, use: mysql://<user>:<password>@<host>:<port>/<dbname>
// - For PostgreSQL, use: postgresql://<user>:<password>@<host>:<port>/<dbname>
// Example for MySQL:
// DATABASE_URL="mysql://user:password@localhost:3306/mydatabase"
// Example for PostgreSQL:
// DATABASE_URL="postgresql://user:password@localhost:5432/mydatabase"
//
// Ensure you set the appropriate connection string based on the database you're using.
// After modifying the DATABASE_URL, run 'npx prisma migrate dev' or just 'npm run dev:prisma' to apply migrations.
// =============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @unique @default(uuid())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  Book      Book[] // One-to-many relation to Book
  Review    Review[] // One-to-many relation to Review
  Draft     Draft[]
}

model Book {
  id          String   @id @unique @default(uuid())
  userId      String
  title       String
  author      String
  genreId     String
  genre       Genre    @relation(fields: [genreId], references: [id])
  isbn        String?
  cover       String?
  description String?  @db.VarChar(1000)
  avgRating   Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  draftId     String?
  user        User     @relation(fields: [userId], references: [id])
  draft       Draft?   @relation(fields: [draftId], references: [id], onDelete: Cascade)
  reviews     Review[] // One-to-many relation with Review
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  text      String
  rating    Int      @default(1)
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Book      Book[] // One-to-many relation with Book
}

// New models

model Draft {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  Page        Page[]
  Book        Book[]
}

model Page {
  id      String   @id @default(uuid())
  draftId String
  type    PageType
  title   String? // For title page
  chapter String? // For content page
  order   Int
  content String   @db.Text
  draft   Draft    @relation(fields: [draftId], references: [id])

  @@index([draftId]) // Index on draftId for faster queries
}

enum PageType {
  INDEX
  TITLE
  CONTENT
}
